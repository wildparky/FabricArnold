//
// Copyright (c) 2014, Steven Caron <steven@steven-caron.com> All rights reserved.
//
// FabricArnold Extension

struct AtArray
{
  Data data;
  UInt32 nelements;
  Byte nkeys;
  Byte type;
  //Byte padding[2];
};


function AtArray AiArray(UInt32 nelements, Byte nkeys, Byte type) = "fe_AiArray";
function AtArray AiArrayAllocate(UInt32 nelements, Byte nkeys, Byte type) = "fe_AiArrayAllocate";
function AiArrayDestroy(io AtArray array) = "fe_AiArrayDestroy";
// function AtArray AiArrayConvert(UInt32 nelements, Byte nkeys, Byte type, Data data) = "fe_AiArrayConvert";
// function AtArray AiArrayModify(AtArray array, UInt32 nelements, Byte nkeys, Byte type) = "fe_AiArrayModify";
// function AtArray AiArrayCopy(AtArray array) = "fe_AiArrayCopy";
// function Boolean AiArraySetKey(AtArray array, Byte key, Data data) = "fe_AiArraySetKey";
// function AtPoint AiArrayInterpolatePnt(AtArray array, Float32 time, UInt32 idx) = "fe_AiArrayInterpolatePnt";
// function AtVector AiArrayInterpolateVec(AtArray array, Float32 time, UInt32 idx) = "fe_AiArrayInterpolateVec";
// function AtColor AiArrayInterpolateRGB(AtArray array, Float32 time, UInt32 idx) = "fe_AiArrayInterpolateRGB";
// function AtRGBA AiArrayInterpolateRGBA(AtArray array, Float32 time, UInt32 idx) = "fe_AiArrayInterpolateRGBA";
// function Float32 AiArrayInterpolateFlt(AtArray array, Float32 time, UInt32 idx) = "fe_AiArrayInterpolateFlt";
// function AiArrayInterpolateMtx(AtArray array, Float32 time, UInt32 idx, io AtMatrix result) = "fe_AiArrayInterpolateMtx";

// array getters
// function Boolean AiArrayGetBool(in AtArray a, in UInt32 i) = "fe_AiArrayGetBool";
// function Byte AiArrayGetByte(in AtArray a, in UInt32 i) = "fe_AiArrayGetByte";
// function Integer AiArrayGetInt(in AtArray a, in UInt32 i) = "fe_AiArrayGetInt";
// function UInt32 AiArrayGetUInt(in AtArray a, in UInt32 i) = "fe_AiArrayGetUInt";
// function Float32 AiArrayGetFlt(in AtArray a, in UInt32 i) = "fe_AiArrayGetFlt";
// function AtRGB AiArrayGetRGB(in AtArray a, in UInt32 i) = "fe_AiArrayGetRGB";
// function AtRGBA AiArrayGetRGBA( in AtArray a, in UInt32 i) = "fe_AiArrayGetRGBA";
// function AtPoint AiArrayGetPnt(in AtArray a, in UInt32 i) = "fe_AiArrayGetPnt";
// function AtPoint2 AiArrayGetPnt2(in AtArray a, in UInt32 i) = "fe_AiArrayGetPnt2";
// function AtVector AiArrayGetVec(in AtArray a, in UInt32 i) = "fe_AiArrayGetVec";
// function AiArrayGetMtx(in AtArray a, in UInt32 i, io AtMatrix out) = "fe_AiArrayGetMtx";
function String AiArrayGetStr(in AtArray a, in UInt32 i) = "fe_AiArrayGetStr";
// function Data AiArrayGetPtr(in AtArray a, in UInt32 i) = "fe_AiArrayGetPtr";
// function AtArray AiArrayGetArray(in AtArray a, in UInt32 i) = "fe_AiArrayGetArray";

// array setters
function Boolean AiArraySetBool(io AtArray a, UInt32 i, Boolean val) = "fe_AiArraySetBool";
function AiArraySetByte(io AtArray a, UInt32 i, Byte val) = "fe_AiArraySetByte";
function AiArraySetInt(io AtArray a, UInt32 i, Integer val) = "fe_AiArraySetInt";
function AiArraySetUInt(io AtArray a, UInt32 i, UInt8 val) = "fe_AiArraySetUInt";
function AiArraySetFlt(io AtArray a, UInt32 i, Float32 val) = "fe_AiArraySetFlt";
function AiArraySetRGB(io AtArray a, UInt32 i, AtRGB val) = "fe_AiArraySetRGB";
function AiArraySetRGBA(io AtArray a, UInt32 i, AtRGBA val) = "fe_AiArraySetRGBA";
function AiArraySetPnt(io AtArray a, UInt32 i, AtPoint val) = "fe_AiArraySetPnt";
function AiArraySetPnt2(io AtArray a, UInt32 i, AtPoint2 val) = "fe_AiArraySetPnt2";
function AiArraySetVec(io AtArray a, UInt32 i, AtVector val) = "fe_AiArraySetVec";
function AiArraySetMtx(io AtArray a, UInt32 i, io AtMatrix val) = "fe_AiArraySetMtx";
function Boolean AiArraySetStr(io AtArray a, UInt32 i, String val) = "fe_AiArraySetStr";
function AiArraySetPtr(io AtArray a, UInt32 i, Data val) = "fe_AiArraySetPtr";
function AiArraySetArray(io AtArray a, UInt32 i, io AtArray val) = "fe_AiArraySetArray";
