require FabricArnold;

operator entry(in String filename) {
  UInt64 start = getCurrentTicks();
  AiBegin();

  const Integer nbSpheres = 100000;
  const Float32 radius = 2.0;

  for (Index i; i<nbSpheres; i++)
  {
    Float32 step = Float32(i)/Float32(nbSpheres);
    Float32 theta = AI_PITIMES2 * step;

    Float32 x = radius * cos(theta);
    Float32 z = radius * sin(theta);

    // create a sphere
    ArnoldNode sphere = AiNode("sphere");
    String name = "mysphere_" + String(i);
    AiNodeSetStr(sphere, "name", name);
    AiNodeSetFlt(sphere, "radius", step*0.5);
    AiNodeSetPnt(sphere, "center", x, theta, z);

    // create a lambert shader
    ArnoldNode lambert = AiNode("lambert");
    name = "myshader_" + String(i);
    AiNodeSetStr(lambert, "name", name);
    AiNodeSetRGB(lambert, "Kd_color", 0.0, 1.0, 0.0);

    // assign the sphere's shader
    AiNodeSetPtr(sphere, "shader", lambert.node);
  }

  // create a perspective camera
  ArnoldNode camera = AiNode("persp_camera");
  AiNodeSetStr(camera, "name", "mycamera");
  AiNodeSetPnt(camera, "position", 0.0, 5.0, 20.0);
  AiNodeSetPnt(camera, "look_at", 0.0, 5.0, 0.0);

  // create a point light
  ArnoldNode light = AiNode("point_light");
  AiNodeSetStr(light, "name", "mylight");
  AiNodeSetFlt(light, "exposure", 10.5);
  AiNodeSetPnt(light, "position", 0.0, 20.0, 0.0);

  // create a point light
  ArnoldNode light1 = AiNode("point_light");
  AiNodeSetStr(light1, "name", "mylight_1");
  AiNodeSetFlt(light1, "exposure", 10.5);
  AiNodeSetPnt(light1, "position", 0.0, -20.0, 0.0);

  // set render options
  ArnoldNode options = AiUniverseGetOptions();
  AiNodeSetInt(options, "AA_samples", 4);
  AiNodeSetInt(options, "xres", 320);
  AiNodeSetInt(options, "yres", 240);
  AiNodeSetPtr(options, "camera", camera.node);

  // create an output driver
  ArnoldNode driver = AiNode("driver_jpeg");
  AiNodeSetStr(driver, "name", "mydriver");
  AiNodeSetStr(driver, "filename", filename);

  // create a gaussian filter node
  ArnoldNode gfilter = AiNode("gaussian_filter");
  AiNodeSetStr(gfilter, "name", "myfilter");

  // assign th driver and the filter to the outputs
  AtArray outputs_array = AiArrayAllocate(1, 1, AI_TYPE_STRING);
  AiArraySetStr(outputs_array, 0, "RGB RGB myfilter mydriver");
  AiNodeSetArray(options, "outputs", outputs_array);

  // render the scene
  Integer result = AiRender(AI_RENDER_MODE_CAMERA);
  if (result != AI_SUCCESS)
  {
    report("[FabricArnold::TestSuite] Error " + String(result));
  }

  AiEnd();
  UInt64 end = getCurrentTicks();
  report("Elapsed time: " + getSecondsBetweenTicks(start, end) + " seconds");
}
